#!/usr/bin/python
# /*  Name:    Merlin Cherian
#  *  Class:   CS 536 (Computer Graphics)
#  *
#  *
#  */
from fractions import Fraction
import numpy as np
import argparse

control_points = []
positions = []
T = 0
u = 0
r = 0


# reads xyz coordinates into array
def readfile(fname):

    global positions
    positions = np.loadtxt(fname)
    first_tangent = positions[0]
    last_tangent = positions[1]
    positions = np.delete(positions, [0, 1], 0)
    tangents = []
    tangents.append((1-T)*first_tangent)

    for i in range(1, len(positions)-1):
        tangents.append((1-T)*0.5*(positions[i+1]-positions[i-1]))

    tangents.append((1-T)*last_tangent)

    temp = positions

    while len(temp) > 1:
        p0 = temp[0]
        p3 = temp[1]
        p1 = p0 + Fraction('1/3')*tangents[0]
        p2 = p3 - Fraction('1/3')*tangents[1]
        _set = np.vstack((p0, p1, p2, p3))
        global control_points
        control_points.append(create_bezeir(_set))

        temp = np.delete(temp, 0, 0)
        tangents = np.delete(tangents, 0, 0)


def gen_tvals(t):
    tVals = np.arange(0.0, 1.01, t)
    return tVals


def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)


def fact(k, i):
    return factorial(k)/(factorial(i)*factorial(k-i))


def create_bezeir(input):
    numPoints = len(input)-1
    tVals = gen_tvals(u)
    tVals = [round(elem, 6) for elem in tVals]
    myArr = []
    tempX, tempY, tempZ, testX, testY, testZ = [], [], [], [], [], []
    for t in tVals:
        for i in range(0, numPoints+1):
            cx = float(input[i][0]) * fact(numPoints, i) * pow((1 - t), (numPoints - i)) * pow(t, i)
            cy = float(input[i][1]) * fact(numPoints, i) * pow((1 - t), (numPoints - i)) * pow(t, i)
            cz = float(input[i][2]) * fact(numPoints, i) * pow((1 - t), (numPoints - i)) * pow(t, i)
            tempX.append(cx)
            tempY.append(cy)
            tempZ.append(cz)
        myArr.append([sum(tempX), sum(tempY), sum(tempZ)])
        del tempX[:]
        del tempY[:]
        del tempZ[:]
    return myArr


def print_file(points, positions, radius):
    f1 = open('./out.iv', 'w+')
    f1.write("#Inventor V2.0 ascii"
             "\n"
             "\n"
             "Separator {LightModel {model BASE_COLOR} Material {diffuseColor 1.0 1.0 1.0}"
             "\n"
             "Coordinate3 { 	point [ "
             "\n")


    for sets in points:
        for vals in sets:
            f1.write(' '.join(map(repr, vals)))
            f1.write(",\n")

    f1.write("] } \nIndexedLineSet {coordIndex [\n")
    for i in range(0, (len(points)*len(points[0]))/2):
        num = str(i)
        num += ", "
        f1.write(num)
    f1.write('-1')
    f1.write(
        "\n] } }\nSeparator {\nLightModel {\n"
        "model PHONG\n"
        "}\n"
        "Material {	\n      diffuseColor 1.0 1.0 1.0}\nTransform {\n        translation\n")

    for i in range(0, len(positions)):
        f1.write(' '.join(map(repr, positions[i])))
        if i != len(positions) - 1:
            f1.write("\n"
                     "}Sphere {	radius " + radius + " }}\nSeparator {LightModel {model PHONG}Material {	diffuseColor 1.0 1.0 1.0}\nTransform {translation\n")
        else:
            f1.write("\n"
                     "}Sphere {	radius " + radius + " }}")


    f1.close()


def print_stdout(points, positions, radius):
    print ("#Inventor V2.0 ascii"
             "\n"
             "\n"
             "Separator {LightModel {model BASE_COLOR} Material {diffuseColor 1.0 1.0 1.0}"
             "\n"
             "Coordinate3 { 	point [ "
             "\n")


    for sets in points:
        for vals in sets:
            print(' '.join(map(repr, vals)))
            print(",\n")

    print("] } \nIndexedLineSet {coordIndex [\n")
    for i in range(0, len(points)*len(points[2])):
        num = str(i)
        num += ", "
        print(num)
    print('-1')
    print (
        "\n] } }\nSeparator {\nLightModel {\n"
        "model PHONG\n"
        "}\n"
        "Material {	\n      diffuseColor 1.0 1.0 1.0}\nTransform {\n        translation\n")

    for i in range(0, len(positions)):
        print (' '.join(map(repr, positions[i])))
        if i != len(positions) - 1:
            print ("\n"
                     "}Sphere {	radius " + radius + " }}\nSeparator {LightModel {model PHONG}Material {	diffuseColor 1.0 1.0 1.0}\nTransform {translation\n")
        else:
            print ("\n"
                     "}Sphere {	radius " + radius + " }}")


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-u', '--u', help='Description for u argument', required=False)
    parser.add_argument('-r', '--r', help='Description for r argument', required=False)
    parser.add_argument('-f', '--f', help='Description for f argument', required=False)
    parser.add_argument('-t', '--t', help='Description for t argument', required=False)
    args = vars(parser.parse_args())
    if args['u']:
        global u
        u = float(args['u'])
    else:
        u = 0.09
    if args['t']:
        global T
        T = float(args['t'])
    else:
        T = 0
    if args['f']:
        readfile(args['f'])
    else:
        readfile('input.txt')
    if args['r']:
        global r
        r = args['r']
    else:
        r = str(0.1)
    readfile('input.txt')

    print_stdout(control_points, positions, str(r))


if __name__ == '__main__':
    main()
